<?php

/**
 * Implements hook_install().
 *
 * Perform actions to set up the site for this profile. Modified standard install.
 */
 
function faultstart_install_load_profile(&$install_state)
{
	//var_dump($install_state);
}

function faultstart_install() {
	
	// Installer flags
	$flag_install_webform_form = false;
	
	// Add text formats.
	$filtered_html_format = array(
	'format' => 'filtered_html',
	'name' => 'Filtered HTML',
	'weight' => 0,
	'filters' => array(
	  // URL filter.
	  'filter_url' => array(
		'weight' => 0,
		'status' => 1,
	  ),
	  // HTML filter.
	  'filter_html' => array(
		'weight' => 1,
		'status' => 1,
	  ),
	  // Line break filter.
	  'filter_autop' => array(
		'weight' => 2,
		'status' => 1,
	  ),
	  // HTML corrector filter.
	  'filter_htmlcorrector' => array(
		'weight' => 10,
		'status' => 1,
	  ),
	),
	);
	$filtered_html_format = (object) $filtered_html_format;
	filter_format_save($filtered_html_format);

	$full_html_format = array(
	'format' => 'full_html',
	'name' => 'Full HTML',
	'weight' => 1,
	'filters' => array(
	  // URL filter.
	  'filter_url' => array(
		'weight' => 0,
		'status' => 1,
	  ),
	  // Line break filter.
	  'filter_autop' => array(
		'weight' => 1,
		'status' => 1,
	  ),
	  // HTML corrector filter.
	  'filter_htmlcorrector' => array(
		'weight' => 10,
		'status' => 1,
	  ),
	),
	);
	$full_html_format = (object) $full_html_format;
	filter_format_save($full_html_format);

	// Enable some standard blocks.
	$default_theme = variable_get('theme_default', 'bartik'); // TODO: find who installs the theme
	//$default_theme = variable_get('theme_default', 'omega');
	$admin_theme = 'seven';
	$blocks = array(
	array(
	  'module' => 'system',
	  'delta' => 'main',
	  'theme' => $default_theme,
	  'status' => 1,
	  'weight' => 0,
	  'region' => 'content',
	  'pages' => '',
	  'cache' => -1,
	),
	array(
	  'module' => 'search',
	  'delta' => 'form',
	  'theme' => $default_theme,
	  'status' => 1,
	  'weight' => -1,
	  'region' => 'page_top',
	  'pages' => '',
	  'cache' => -1,
	),
	array(
	  'module' => 'system',
	  'delta' => 'main',
	  'theme' => $admin_theme,
	  'status' => 1,
	  'weight' => 0,
	  'region' => 'content',
	  'pages' => '',
	  'cache' => -1,
	),
	array(
	  'module' => 'user',
	  'delta' => 'login',
	  'theme' => $admin_theme,
	  'status' => 1,
	  'weight' => 10,
	  'region' => 'content',
	  'pages' => '',
	  'cache' => -1,
	),
	/*
	array(
	  'module' => 'node',
	  'delta' => 'recent',
	  'theme' => $admin_theme,
	  'status' => 1,
	  'weight' => 10,
	  'region' => 'dashboard_main',
	  'pages' => '',
	  'cache' => -1,
	),
	array(
	  'module' => 'user',
	  'delta' => 'login',
	  'theme' => $default_theme,
	  'status' => 1,
	  'weight' => 0,
	  'region' => 'sidebar_first',
	  'pages' => '',
	  'cache' => -1,
	),
	array(
	  'module' => 'system',
	  'delta' => 'navigation',
	  'theme' => $default_theme,
	  'status' => 1,
	  'weight' => 0,
	  'region' => 'sidebar_first',
	  'pages' => '',
	  'cache' => -1,
	),
	array(
	  'module' => 'system',
	  'delta' => 'powered-by',
	  'theme' => $default_theme,
	  'status' => 1,
	  'weight' => 10,
	  'region' => 'footer',
	  'pages' => '',
	  'cache' => -1,
	),
	array(
	  'module' => 'system',
	  'delta' => 'help',
	  'theme' => $default_theme,
	  'status' => 1,
	  'weight' => 0,
	  'region' => 'help',
	  'pages' => '',
	  'cache' => -1,
	),
	array(
	  'module' => 'system',
	  'delta' => 'help',
	  'theme' => $admin_theme,
	  'status' => 1,
	  'weight' => 0,
	  'region' => 'help',
	  'pages' => '',
	  'cache' => -1,
	),
	array(
	  'module' => 'user',
	  'delta' => 'new',
	  'theme' => $admin_theme,
	  'status' => 1,
	  'weight' => 0,
	  'region' => 'dashboard_sidebar',
	  'pages' => '',
	  'cache' => -1,
	),
	array(
	  'module' => 'search',
	  'delta' => 'form',
	  'theme' => $admin_theme,
	  'status' => 1,
	  'weight' => -10,
	  'region' => 'dashboard_sidebar',
	  'pages' => '',
	  'cache' => -1,
	),
	*/
	);
	$query = db_insert('block')->fields(array('module', 'delta', 'theme', 'status', 'weight', 'region', 'pages', 'cache'));
	foreach ($blocks as $block) {
		$query->values($block);
	}
	$query->execute();

	// Insert default pre-defined node types into the database. For a complete
	// list of available node type attributes, refer to the node type API
	// documentation at: http://api.drupal.org/api/HEAD/function/hook_node_info.
	$types = array(
	array(
	  'type' => 'page',
	  'name' => st('Basic page'),
	  'base' => 'node_content',
	  'description' => st("Use <em>basic pages</em> for your static content, such as an 'About us' page."),
	  'custom' => 1,
	  'modified' => 1,
	  'locked' => 0,
	),
	array(
	  'type' => 'article',
	  'name' => st('Article'),
	  'base' => 'node_content',
	  'description' => st('Use <em>articles</em> for time-sensitive content like news, press releases or blog posts.'),
	  'custom' => 1,
	  'modified' => 1,
	  'locked' => 0,
	),
	);

	foreach ($types as $type) {
		$type = node_type_set_defaults($type);
		node_type_save($type);
		node_add_body_field($type);
	}

	// Insert default pre-defined RDF mapping into the database.
	$rdf_mappings = array(
	array(
	  'type' => 'node',
	  'bundle' => 'page',
	  'mapping' => array(
		'rdftype' => array('foaf:Document'),
	  ),
	),
	array(
	  'type' => 'node',
	  'bundle' => 'article',
	  'mapping' => array(
		'field_image' => array(
		  'predicates' => array('og:image', 'rdfs:seeAlso'),
		  'type' => 'rel',
		),
		'field_tags' => array(
		  'predicates' => array('dc:subject'),
		  'type' => 'rel',
		),
	  ),
	),
	);
	foreach ($rdf_mappings as $rdf_mapping) {
	rdf_mapping_save($rdf_mapping);
	}

	// Default "Basic page" to not be promoted and have comments disabled.
	variable_set('node_options_page', array('status'));
	//variable_set('comment_page', COMMENT_NODE_HIDDEN);

	// Don't display date and author information for "Basic page" nodes by default.
	variable_set('node_submitted_page', FALSE);

	// Enable user picture support and set the default to a square thumbnail option.
	variable_set('user_pictures', '1');
	variable_set('user_picture_dimensions', '1024x1024');
	variable_set('user_picture_file_size', '800');
	variable_set('user_picture_style', 'thumbnail');

	// Allow visitor account creation with administrative approval.
	variable_set('user_register', USER_REGISTER_VISITORS_ADMINISTRATIVE_APPROVAL);

	// Create a default vocabulary named "Tags", enabled for the 'article' content type.
	$description = st('Use tags to group articles on similar topics into categories.');
	$help = st('Enter a comma-separated list of words to describe your content.');
	$vocabulary = (object) array(
	'name' => st('Tags'),
	'description' => $description,
	'machine_name' => 'tags',
	'help' => $help,

	);
	taxonomy_vocabulary_save($vocabulary);

	$field = array(
	'field_name' => 'field_' . $vocabulary->machine_name,
	'type' => 'taxonomy_term_reference',
	// Set cardinality to unlimited for tagging.
	'cardinality' => FIELD_CARDINALITY_UNLIMITED,
	'settings' => array(
	  'allowed_values' => array(
		array(
		  'vocabulary' => $vocabulary->machine_name,
		  'parent' => 0,
		),
	  ),
	),
	);
	field_create_field($field);

	$instance = array(
	'field_name' => 'field_' . $vocabulary->machine_name,
	'entity_type' => 'node',
	'label' => 'Tags',
	'bundle' => 'article',
	'description' => $vocabulary->help,
	'widget' => array(
	  'type' => 'taxonomy_autocomplete',
	  'weight' => -4,
	),
	'display' => array(
	  'default' => array(
		'type' => 'taxonomy_term_reference_link',
		'weight' => 10,
	  ),
	  'teaser' => array(
		'type' => 'taxonomy_term_reference_link',
		'weight' => 10,
	  ),
	),
	);
	field_create_instance($instance);


	// Create an image field named "Image", enabled for the 'article' content type.
	// Many of the following values will be defaulted, they're included here as an illustrative examples.
	// See http://api.drupal.org/api/function/field_create_field/7

	$field = array(
	'field_name' => 'field_image',
	'type' => 'image',
	'cardinality' => 1,
	'locked' => FALSE,
	'indexes' => array('fid' => array('fid')),
	'settings' => array(
	  'uri_scheme' => 'public',
	  'default_image' => FALSE,
	),
	'storage' => array(
	  'type' => 'field_sql_storage',
	  'settings' => array(),
	),
	);
	field_create_field($field);


	// Many of the following values will be defaulted, they're included here as an illustrative examples.
	// See http://api.drupal.org/api/function/field_create_instance/7
	$instance = array(
	'field_name' => 'field_image',
	'entity_type' => 'node',
	'label' => 'Image',
	'bundle' => 'article',
	'description' => st('Upload an image to go with this article.'),
	'required' => FALSE,

	'settings' => array(
	  'file_directory' => 'field/image',
	  'file_extensions' => 'png gif jpg jpeg',
	  'max_filesize' => '',
	  'max_resolution' => '',
	  'min_resolution' => '',
	  'alt_field' => TRUE,
	  'title_field' => '',
	),

	'widget' => array(
	  'type' => 'image_image',
	  'settings' => array(
		'progress_indicator' => 'throbber',
		'preview_image_style' => 'thumbnail',
	  ),
	  'weight' => -1,
	),

	'display' => array(
	  'default' => array(
		'label' => 'hidden',
		'type' => 'image',
		'settings' => array('image_style' => 'large', 'image_link' => ''),
		'weight' => -1,
	  ),
	  'teaser' => array(
		'label' => 'hidden',
		'type' => 'image',
		'settings' => array('image_style' => 'medium', 'image_link' => 'content'),
		'weight' => -1,
	  ),
	),
	);
	field_create_instance($instance);

	// Enable default permissions for system roles.
	$filtered_html_permission = filter_permission_name($filtered_html_format);
	
	// Allow visitor account creation, but with administrative approval.
	variable_set('user_register', USER_REGISTER_VISITORS_ADMINISTRATIVE_APPROVAL);
	
	// Enable default permissions for system roles.
	//user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, array('access content', 'access comments', $filtered_html_permission));
	//user_role_grant_permissions(DRUPAL_AUTHENTICATED_RID, array('access content', 'access comments', 'post comments', 'skip comment approval', $filtered_html_permission));
	user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, array('access content', $filtered_html_permission));
	user_role_grant_permissions(DRUPAL_AUTHENTICATED_RID, array('access content', $filtered_html_permission));

	// Create a default role for site administrators, with all available permissions assigned.
	$admin_role = new stdClass();
	$admin_role->name = 'administrator';
	$admin_role->weight = 2;
	user_role_save($admin_role);
	
	// Grant admin permissions
	//user_role_grant_permissions($admin_role->rid, array_keys(module_invoke_all('permission')));
	user_role_grant_permissions($admin_role->rid, array('access administration pages', 'access all views', 'access all webform results', 'access backup and migrate', 'access backup files', 'access content', 'access content overview', 'access contextual links', 'access own webform results', 'access own webform submissions', 'access site in maintenance mode', 'access user profiles', 'administer backup and migrate', 'administer css injection', 'administer css3pie', 'administer delta', 'administer image styles', 'administer menu', 'administer meta tags', 'administer pathauto', 'administer software updates', 'administer taxonomy', 'administer url aliases', 'administer views', 'cancel account', 'change own username', 'clone node', 'clone own nodes', 'create article content', 'create page content', 'create url aliases', 'create webform content', 'delete all webform submissions', 'delete any article content', 'delete any page content', 'delete any webform content', 'delete backup files', 'delete own article content', 'delete own page content', 'delete own webform content', 'delete own webform submissions', 'delete terms in 1', 'edit all webform submissions', 'edit any article content', 'edit any page content', 'edit any webform content', 'edit meta tags', 'edit own article content', 'edit own page content', 'edit own webform content', 'edit own webform submissions', 'edit terms in 1', 'enter webform revision log entry', 'notify of path changes', 'override article published option', 'override page published option', 'override webform authored by option', 'override webform authored on option', 'override webform promote to front page option', 'override webform published option', 'override webform revision option', 'override webform sticky option', 'perform backup', 'restore from backup', 'search content', 'select account cancellation method', 'use text format filtered_html', 'view own unpublished content', 'view the administration theme'));
	// Set this as the administrator role.
	variable_set('user_admin_role', $admin_role->rid);

	// Assign user 1 the "administrator" role.
	db_insert('users_roles')
		->fields(array('uid' => 1, 'rid' => $admin_role->rid))
		->execute();

	// IFIP. Step 1
	// Create a role for site editor.
	$editor_role = new stdClass();
	$editor_role->name = 'editor';
	$editor_role->weight = 3;
	user_role_save($editor_role);
	//user_role_grant_permissions($editor_role->rid, array_keys(module_invoke_all('permission')));
	user_role_grant_permissions($editor_role->rid, array());
	// Set this as the editor role.
	//variable_set('user_admin_role', $editor_role->rid);

	// Assign user 2 the "editor" role.
	db_insert('users_roles')
		->fields(array('uid' => 2, 'rid' => $editor_role->rid))
		->execute();

	// Update the menu router information.
	menu_rebuild();

	// Enable the admin theme.
	db_update('system')
		->fields(array('status' => 1))
		->condition('type', 'theme')
		->condition('name', 'seven')
		->execute();
	variable_set('admin_theme', 'seven');
	variable_set('node_admin_theme', '1');

	// Create Basic Nodes
	$node = new stdClass();
	$node->type = 'page';
	node_object_prepare($node);
	$node->title = "Home page";
	$node->body['und']['0']['value'] = 'Lorem ipsum... this is the REmix!';
	node_save($node);
	
	// Set as home page
	db_update('variable')
		->fields(array('value' => 'node/1'))
		->condition('name', 'site_frontpage')
		->execute();
	variable_set('site_frontpage', 'node/1');


	$node = new stdClass();
	$node->type = 'page';
	node_object_prepare($node);
	$node->title = "About";
	$node->body['und']['0']['value'] = 'World citizen';
	node_save($node);

	if ($flag_install_webform_form) {
		// Create webform
		$node = new stdClass();
		$node->type = 'webform';
		node_object_prepare($node);
		$node->title = "Webform";
		$node->body['und']['0']['value'] = 'Insert fields here';
		$node->components = array();
		node_save($node);
		
		// Add fields
		$form_fields = array(
				array('key'=>'name', 'name'=>'Name', 'type'=>'textfield', 'mandatory'=>1),
				array('key'=>'email', 'name'=>'Email', 'type'=>'email','mandatory'=> 1),
				array('key'=>'subject', 'name'=>'Subject', 'type'=>'textfield', 'mandatory'=>0),
				array('key'=>'message', 'name'=>'Message', 'type'=>'textarea', 'mandatory'=>1),
			);
		foreach ($form_fields as $order => $field) {
			$node->components[$order+1] = faultstart_create_form_component($node->nid, $order+1, $field['key'], $field['name'], $field['type'], $field['mandatory'], $order);
		}
		
		// Add emails
		$form_emails = array('support@ifactory.com.au');
		foreach ($form_emails as $order => $email) {
			$node->emails[$order+1] = faultstart_create_form_email($node->nid, $order+1, $email);
		}
		node_save($node);
	}

	faultstart_install_editor_menu();
	menu_rebuild(); // Update the menu router information.
	
	// Create a Home link in the main menu.
	$menu_main = 'main-menu';
	$menu_editor = 'editor-menu';
	
	$item = array(
	'link_title' => st('Home'),
	'link_path' => '<front>',
	'menu_name' => $menu_main,
	'weight' => 0,
	);
	menu_link_save($item);

	$item = array(
	'link_title' => st('About'),
	'link_path' => 'node/2',
	'menu_name' => $menu_main,
	'weight' => 1,
	);
	menu_link_save($item);

	$item = array(
	'link_title' => st('Contact Us'),
	'link_path' => 'node/3',
	'menu_name' => $menu_main,
	'weight' => 2,
	);
	menu_link_save($item);
	
	$item = array(
		'link_title' => st('Logout'),
		'link_path' => 'user/logout',
		'menu_name' => $menu_editor,
		'weight' => 25,
	);
	menu_link_save($item);
}


function faultstart_install_editor_menu() {
	$system_menus = menu_list_system_menus();
	$t = get_t();
	$descriptions = array( // Add more menus if needed
		'editor-menu' => $t('The <em>Editor</em> menu contains links intended for site editors, i.e. clients. It contains basic administration links'),
	);
	foreach ($system_menus as $menu_name => $title) {
		$menu = array(
			'menu_name' => $menu_name,
			'title' => $t($title),
			'description' => $descriptions[$menu_name],
		);
		menu_save($menu);
	}
}

function faultstart_create_form_component($nid, $cid, $key, $name, $type = 'textfield', $mandatory = 1, $weight = 0) {
	$component = array (
		'nid' => $nid,
		'cid' => $cid, // incremental
		'pid' => 0,
		'form_key' => $key,
		'name' => $name,
		'type' => $type,
		'value' => '',
		'extra' => array(
			'title_display' => 'before',
			'private' => 0,
			'disabled' => 0,
			'unique' => 0,
			'conditional_operator' => '=',
			'description' => '',
			'attributes' => array(),
			'conditional_component' => '',
			'conditional_values' => '',
		),
		'mandatory' => $mandatory,
		'weight' => $weight, // incremental
		'page_num' => 1,
	);
	
	if ($type != 'textarea') {
		$extra1 = array(
			'width' => '',
		);
		$component['extra'] = array_merge($component['extra'], $extra1);
	}
	else {
		$extra2 = array(
			'cols' => '',
			'rows' => '',
		);
		$component['extra'] = array_merge($component['extra'], $extra2);
	}
	if (($type != 'email') && ($type != 'textarea')) {
		$extra3 = array(
			'maxlength' => '',
			'field_prefix' => '',
			'field_suffix' => '',
		);
		$component['extra'] = array_merge($component['extra'], $extra3);
	}
	
	return $component;
}

function faultstart_create_form_email($nid, $eid, $email) {
	return array (
		'nid' => $nid,
		'eid' => $cid, // incremental
		'email' => $email,
		'subject' => 3,
		'from_name' => 1,
		'from_address' => 2,
		'template' => 'default',
		'excluded_components' => array(),
		'html' => 0,
		'attachments' => 0,
	);
}